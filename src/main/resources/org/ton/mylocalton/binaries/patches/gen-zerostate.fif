#!/usr/bin/create-state -s
"TonUtil.fif" include
"Asm.fif" include
"Lists.fif" include

def? $1 { @' $1 } { "" } cond constant suffix
{ suffix $+ } : +suffix
256 1<<1- 15 / constant AllOnes

wc_master setworkchain
GLOBAL_ID setglobalid   // negative value means a test instance of the blockchain

// Initial state of Workchain 0 (Basic workchain)

0 mkemptyShardState

cr ."initial basechain state is:" cr dup <s csr. cr
dup dup 31 boc+>B dup Bx. cr
dup "basestate0" +suffix +".boc" tuck B>file
."(Initial basechain state saved to file " type .")" cr
Bhashu dup =: basestate0_fhash
."file hash=" dup 64x. space 256 u>B dup B>base64url type cr
"basestate0" +suffix +".fhash" B>file
hashu dup =: basestate0_rhash
."root hash=" dup 64x. space 256 u>B dup B>base64url type cr
"basestate0" +suffix +".rhash" B>file
basestate0_rhash basestate0_fhash now 0 1 32 0 add-std-workchain
config.workchains!

// SmartContract #1 (Simple wallet)

<{ SETCP0 DUP IFNOTRET // return if recv_internal
   DUP 85143 INT EQUAL IFJMP:<{ // "seqno" get-method
     DROP c4 PUSHCTR CTOS 32 PLDU  // cnt
   }>
   INC 32 THROWIF  // fail unless recv_external
   512 INT LDSLICEX DUP 32 PLDU   // sign cs cnt
   c4 PUSHCTR CTOS 32 LDU 256 LDU ENDS  // sign cs cnt cnt' pubk
   s1 s2 XCPU            // sign cs cnt pubk cnt' cnt
   EQUAL 33 THROWIFNOT   // ( seqno mismatch? )
   s2 PUSH HASHSU        // sign cs cnt pubk hash
   s0 s4 s4 XC2PU        // pubk cs cnt hash sign pubk
   CHKSIGNU              // pubk cs cnt ?
   34 THROWIFNOT         // signature mismatch
   ACCEPT
   SWAP 32 LDU NIP 8 LDU LDREF ENDS      // pubk cnt mode msg
   SWAP SENDRAWMSG       // pubk cnt ; ( message sent )
   INC NEWC 32 STU 256 STU ENDC c4 POPCTR
}>c
// code
<b 0 32 u,
   "main-wallet" +suffix +".pk" load-generate-keypair drop
   B,
b> // data
Libs{
  x{ABACABADABACABA} s>c public_lib
  x{1234} x{5678} |_ s>c private_lib
}Libs  // libraries
GR$INITIAL_BALANCE // balance
0 // split_depth
0 // ticktock
AllOnes 0 * // address
6 // mode: create+setaddr
register_smc
dup make_special dup constant smc1_addr
Masterchain over
2dup ."wallet address = " .addr cr 2dup 6 .Addr cr
"main-wallet" +suffix +".addr" save-address-verbose

// SmartContract #3
PROGRAM{
  recv_internal x{} PROC
  run_ticktock PROC:<{
    c4 PUSHCTR CTOS 32 LDU 256 LDU ENDS
    NEWC ROT INC 32 STUR OVER 256 STUR ENDC
    c4 POPCTR
    // first 32 bits of persistent data have been increased
    // remaining 256 bits with an address have been fetched
    // create new empty message with 0.1 Grams to that address
    NEWC b{00100010011111111} STSLICECONST TUCK 256 STU
    100000000 INT STGRAMS  // store 0.1 Grams
    1 4 + 4 + 64 + 32 + 1+ 1+ INT STZEROES ENDC
    // send raw message from Cell
    ZERO SENDRAWMSG
    -17 INT 256 STIR 130000000 INT STGRAMS
    107 INT STZEROES ENDC
    ZERO // another message with 0.13 Grams to account -17
    NEWC b{11000100100000} "test" $>s |+ STSLICECONST
    123456789 INT STGRAMS
    107 INT STZEROES "Hello, world!" $>s STSLICECONST ENDC
    ZERO SENDRAWMSG SENDRAWMSG // external message to address "test"
  }>
}END>c
// code
<b x{11EF55AA} s, smc1_addr 256 u, b> // data
// empty_cell // libraries
Libs{
  x{ABACABADABACABA} s>c public_lib
  x{1234} x{5678} |_ s>c public_lib
}Libs  // libraries
GR$1 // balance
0 // split_depth
3 // ticktock: tick
2 // mode: create
register_smc
dup make_special dup constant smc3_addr
."address = " 64x. cr


/*
 *
 * SmartContract #4 (elector)
 *
 */
"auto/elector-code.fif" include   // code in separate source file
<b 0 1 1+ 1+ 4 + 32 + u, 0 256 u, b>  // data: dict dict dict grams uint32 uint256
empty_cell  // libraries
GR$10  // balance: 10 grams
0 // split_depth
2 // ticktock: tick
AllOnes 3 * // address: -1:333...333
6 // mode: create + setaddr
register_smc
dup make_special dup constant smc4_addr dup constant elector_addr
Masterchain swap
."elector smart contract address = " 2dup .addr cr 2dup 7 .Addr cr
"elector" +suffix +".addr" save-address-verbose

// validator-0 wallet-v3 - validator on genesis node
"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator.pk" load-generate-keypair constant validator_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-0 address = " .addr cr 2dup 6 .Addr cr
"validator.addr" save-address-verbose


"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator-1.pk" load-generate-keypair constant validator1_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-1 address = " .addr cr 2dup 6 .Addr cr
"validator-1.addr" save-address-verbose


"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator-2.pk" load-generate-keypair constant validator2_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-2 address = " .addr cr 2dup 6 .Addr cr
"validator-2.addr" save-address-verbose


"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator-3.pk" load-generate-keypair constant validator3_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-3 address = " .addr cr 2dup 6 .Addr cr
"validator-3.addr" save-address-verbose


"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator-4.pk" load-generate-keypair constant validator4_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-4 address = " .addr cr 2dup 6 .Addr cr
"validator-4.addr" save-address-verbose


"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator-5.pk" load-generate-keypair constant validator5_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-5 address = " .addr cr 2dup 6 .Addr cr
"validator-5.addr" save-address-verbose

"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator-6.pk" load-generate-keypair constant validator6_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-6 address = " .addr cr 2dup 6 .Addr cr
"validator-6.addr" save-address-verbose


"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "validator-7.pk" load-generate-keypair constant validator7_pk
   B,
b> // data
empty_cell // no libraries
GR$50005   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."validator-7 address = " .addr cr 2dup 6 .Addr cr
"validator-7.addr" save-address-verbose

// Faucet smartcontract - wallet-v3
"wallet-v3-code.fif" include
// code
<b 0 32 u, 42 32 u,
   "faucet.pk" load-generate-keypair constant faucet_pk
   B,
b> // data
empty_cell // no libraries
GR$1000001   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."faucet address = " .addr cr 2dup 6 .Addr cr
"faucet.addr" save-address-verbose

// new-highload-wallet-v2.fif
"highload-wallet-v2-code.fif" include
// code
<b 42 32 i, 0 64 u,
   "faucet-highload.pk" load-generate-keypair constant faucet_hl_pk
   B,
   false 1 i,
b> // data
empty_cell // no libraries
GR$1000001   // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."faucet-highload address = " .addr cr 2dup 6 .Addr cr
"faucet-highload.addr" save-address-verbose

// new-highload-wallet-v2.fif
"highload-wallet-v2-code.fif" include
// code
<b 42 32 i, 0 64 u,
   "data-highload.pk" load-generate-keypair constant data_hl_pk
   B,
   false 1 i,
b> // data
empty_cell // no libraries
GR$1000001  // balance
0 // split_depth
0 // ticktock
2 // mode: create + setaddr
register_smc
dup make_special dup constant faucet_addr
Masterchain over
2dup ."data-highload address = " .addr cr 2dup 6 .Addr cr
"data-highload.addr" save-address-verbose

/*
 *
 * Configuration Parameters
 *
 */
// version capabilities
7 capCreateStats capBounceMsgBody or capReportVersion or capShortDequeue or config.version!
// max-validators max-main-validators min-validators
MAX_VALIDATORS MAX_MAIN_VALIDATORS MIN_VALIDATORS config.validator_num!
// min-stake max-stake min-total-stake max-factor
GR$MIN_STAKE GR$MAX_STAKE GR$MIN_TOTAL_STAKE sg~MAX_FACTOR config.validator_stake_limits!
// elected-for elect-start-before elect-end-before stakes-frozen-for
// 400000 200000 4000 400000 config.election_params!
ELECTED_FOR ELECTION_START_BEFORE ELECTION_END_BEFORE ELECTION_STAKE_FROZEN config.election_params!  // DEBUG
// config-addr = -1:5555...5555
AllOnes 5 * constant config_addr
config_addr config.config_smc!
// elector-addr
elector_addr config.elector_smc!

// 1 sg* 100 sg* 1000 sg* 1000000 sg* config.storage_prices!  // old values (too high)
1 500 1000 500000 config.storage_prices!
config.special!

// gas_price gas_limit special_gas_limit gas_credit block_gas_limit freeze_due_limit delete_due_limit flat_gas_limit flat_gas_price --
GAS_PRICE sg* 1 *M dup 10000 10 *M GR$0.1 GR$1.0 1000 1000000 config.gas_prices!
GAS_PRICE_MC sg* 1 *M 10 *M 10000 10 *M GR$0.1 GR$1.0 1000 10000000 config.mc_gas_prices!
// lump_price bit_price cell_price ihr_factor first_frac next_frac
1000000 1000 sg* CELL_PRICE sg* 3/2 sg*/ 1/3 sg*/ 1/3 sg*/ config.fwd_prices!
10000000 10000 sg* CELL_PRICE_MC sg* 3/2 sg*/ 1/3 sg*/ 1/3 sg*/ config.mc_fwd_prices!
// mc-cc-lifetime sh-cc-lifetime sh-val-lifetime sh-val-num mc-shuffle
250 250 5500 7 true config.catchain_params!
// round-candidates next-cand-delay-ms consensus-timeout-ms fast-attempts attempt-duration cc-max-deps max-block-size max-collated-size new-cc-ids
3 1000 16000 3 8 4 2 *Mi 2 *Mi true config.consensus_params!

128 *Ki 512 *Ki 1 *Mi triple  // [ underload soft hard ] : block bytes limit
100000 500000 1000000 triple  // gas limits
1000 5000 10000 triple        // lt limits
triple dup untriple config.mc_block_limits!
untriple config.block_limits!

GR$1.7 GR$1 config.block_create_fees!
// smc1_addr config.collector_smc!
smc1_addr config.minter_smc!

1000000000000 -17 of-cc 666666666666 239 of-cc cc+ config.to_mint!

( 0 1 9 10 12 14 15 16 17 18 20 21 22 23 24 25 28 34 ) config.mandatory_params!
( -999 -1000 -1001 0 1 9 10 12 14 15 16 17 32 34 36 ) config.critical_params!

// [ min_tot_rounds max_tot_rounds min_wins max_losses min_store_sec max_store_sec bit_pps cell_pps ]
// first for ordinary proposals, then for critical proposals
_( 2 3 2 2 1000000 10000000 1 500 )
_( 4 7 4 2 5000000 20000000 2 1000 )
config.param_proposals_setup!

// deposit bit_pps cell_pps
GR$100 1 500 config.complaint_prices!

// "path_to_genesis_pub_key" file>B { dup Blen } { 32 B| swap dup ."Validator 1 public key = " Bx. cr initial_stake_genesis add-validator } while drop
// "path_to_node2_pub_key" file>B { dup Blen } { 32 B| swap dup ."Validator 2 public key = " Bx. cr initial_stake_node2 add-validator } while drop
// "path_to_node3_pub_key" file>B { dup Blen } { 32 B| swap dup ."Validator 3 public key = " Bx. cr initial_stake_node3 add-validator } while drop
// "path_to_node4_pub_key" file>B { dup Blen } { 32 B| swap dup ."Validator 4 public key = " Bx. cr initial_stake_node4 add-validator } while drop
// "path_to_node5_pub_key" file>B { dup Blen } { 32 B| swap dup ."Validator 5 public key = " Bx. cr initial_stake_node5 add-validator } while drop
// "path_to_node6_pub_key" file>B { dup Blen } { 32 B| swap dup ."Validator 6 public key = " Bx. cr initial_stake_node6 add-validator } while drop

// newkeypair nip dup ."Validator #1 public key = " Bx. cr
// 17 add-validator
// newkeypair nip dup ."Validator #2 public key = " Bx. cr
// 239 add-validator
ORIGINAL_VSET_VALID_FOR =: orig_vset_valid_for  // original validator set valid 2000 seconds
now dup orig_vset_valid_for + 0 config.validators!

/*
 *
 * SmartContract #5 (Configuration smart contract)
 *
 */
"auto/config-code.fif" include   // code in separate source file
<b configdict ref,  // initial configuration
   0 32 u,          // seqno
   "config-master" +suffix +".pk" load-generate-keypair drop
   B,
   dictnew dict,   // vote dict
b> // data
empty_cell  // libraries
GR$10  // balance
0 1 config_addr 6 register_smc  // tock
dup set_config_smc
Masterchain swap
."config smart contract address = " 2dup .addr cr 2dup 7 .Addr cr
"config-master" +suffix +".addr" save-address-verbose
// Other data

/*
 *
 *  Create state
 *
 */

create_state
cr cr ."new state is:" cr dup <s csr. cr
dup 31 boc+>B dup Bx. cr
dup "zerostate" +suffix +".boc" tuck B>file
."(Initial masterchain state saved to file " type .")" cr
Bhashu dup =: zerostate_fhash
."file hash= " dup X. space 256 u>B dup B>base64url type cr
"zerostate" +suffix +".fhash" B>file
hashu dup =: zerostate_rhash ."root hash= " dup X. space 256 u>B dup B>base64url type cr
"zerostate" +suffix +".rhash" B>file
basestate0_rhash ."Basestate0 root hash= " dup X. space 256 u>B B>base64url type cr
basestate0_fhash ."Basestate0 file hash= " dup X. space 256 u>B B>base64url type cr
zerostate_rhash ."Zerostate root hash= " dup X. space 256 u>B B>base64url type cr
zerostate_fhash ."Zerostate file hash= " dup X. space 256 u>B B>base64url type cr

